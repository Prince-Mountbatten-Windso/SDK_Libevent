syntax = "proto3";



message GetBlockReq
{
    string version = 1;
    uint64 height = 2;
}


message BlockItem
{
    string  blockhash = 1;
    repeated string  addr = 2;
}

message GetBlockAck
{
    string version = 1;
    sint32 code = 2;
    string message = 3;
    uint64 height = 4;
    uint64 timestamp = 5;
    repeated BlockItem list = 6; // 块哈希和块签名地址 
}


/*************************************获取余额*************************************/
/*************************************Get the balance*************************************/

message GetBalanceReq 
{
    string version = 1;
    string address = 2;
}

//获取余额ack Get balance ack
message GetBalanceAck 
{
    string version = 1;
    sint32 code = 2;
    string message = 3;

    //data
    string address = 4;
    uint64 balance = 5;
    uint64 height = 6;
}

/*************************************获得节点信息*************************************/
/*************************************Get node information*************************************/

message GetNodeInfoReq 
{
    string version = 1;
}

//获取节点信息ack Get node information ack
message GetNodeInfoAck 
{
    string version = 1;
    sint32 code = 2;
    string message = 3;

    //data
    string address = 4;
    string ip = 5;
    uint64 height = 6;
    uint64 gas = 7;
    string ver = 8;
}

/*************************************质押列表*************************************/
/*************************************Stake list*************************************/

// 质押列表请求 req The staking list requests req
message GetStakeListReq 
{
    string version = 1; // 版本 version
    string addr = 2; // 查询地址 Query address
}

// 质押列表应答ack The staking list answers ACK
message StakeItem
{
    string blockhash = 1; // 区块哈希 Block hash
    uint32 blockheight = 2; // 区块高度 Block height
    string utxo = 3; // utox
    uint64 amount = 4; // 质押资产值 Stake asset value
    uint64 time  = 5; // 时间戳  timestamp 
    string fromaddr = 6; //  发起地址 Originating address
    string toaddr = 7;  // 接收地址 Receiving address
    string detail = 8;  // 详情描述 Detailed description
}  

message GetStakeListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3;// 返回错误信息 Returns an error message
    repeated StakeItem list = 4; // 质押信息列表 A list of staking information
}

/*************************************投资列表*************************************/
/*************************************List of investments*************************************/

message GetInvestListReq
{
    string version = 1; // 版本 version
    string addr = 2; // 查询地址 Query address
}

// 投资列表应答
//Investment list answer
message InvestItem
{
    string blockhash = 1; // 区块哈希 Block hash
    uint32 blockheight = 2; // 区块高度 Block height
    string utxo = 3; // utox
    uint64 amount = 4; // 投资资产值 Investment asset value
    uint64 time  = 5; // 时间戳 timestamp
    string fromaddr = 6; //  发起地址 Originating address
    string toaddr = 7;  // 接收地址 Receiving address
    string detail = 8;  // 详情描述 Detailed description
}

message GetInvestListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3;// 返回错误信息 Returns an error message
    repeated InvestItem list = 4; // 投资信息列表 List of investment information
}

/*************************************处理中的交易*************************************/
/*************************************Transactions in progress*************************************/

enum TxType
{
    TxTypeUnknown = 0;
    TxTypeTx = 1; // 交易 trade
    TxTypeStake = 2; // 质押 impawn
    TxTypeUnstake = 3; // 解质押 Unpledge
    TxTypeInvest = 4; // 投资 investment
    TxTypeDisinvest = 5; // 撤资 Divestment
    TxTypeBonus = 6; // 申领 Claim
}

// 获得处理中的交易列表请求 req
//Get a list of transactions in progress request
message GetTxPendingListReq 
{
    string version = 1; // 版本 version
    repeated string addr = 2; // 查询地址，为空时将查询所有地址的处理中交易 Query address, if empty, all addresses will be queried for in-process transactions
}

// 处理中的交易列表应答ack
//The list of transactions in progress responds to ACK
message TxPendingItem
{
    string txHash = 1; // 交易哈希  Transaction hash
    repeated string vins = 2; // vins
    repeated string fromaddr = 3; //  发起地址 Originating address
    repeated string toaddr = 4;  // 接收地址 Receiving address
    uint64 amount = 5; // 金额资产值 Amount asset value
    uint64 time  = 6; // 时间戳 timestamp
    string detail = 7;  // 详情描述 Detailed description
    uint64 gas = 8; // 签名费 Signature fee
    repeated uint64 toAmount = 9; // 每账户金额 Amount per account
    TxType type = 10; // 交易类型 Transaction type
}  

message GetTxPendingListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3;// 返回错误信息 Returns an error message
    repeated string addr = 4; // 查询地址 Query address
    repeated TxPendingItem list = 5; // 处理中的交易信息列表 A list of transaction information in progress
}


/*************************************失败的交易*************************************/
/*************************************Failed transactions*************************************/

message GetTxFailureListReq
{
    string version = 1; // 版本 version
    string addr = 2; // 查询地址 Query address
    string txhash = 3; // 该hash的下一个为起始块 The next part of this hash is the starting block
    uint32 count = 4; // 查询数量 Number of queries
}

message TxFailureItem
{
    string txHash = 1; // 交易哈希 Transaction hash
    repeated string vins = 2; // vins
    repeated string fromaddr = 3; //  发起地址  Originating address
    repeated string toaddr = 4;  // 接收地址 Receiving address
    uint64 amount = 5; // 金额资产值 Amount asset value
    uint64 time  = 6; // 时间戳 timestamp
    string detail = 7;  // 详情描述 Detailed description
    uint64 gas = 8; // 签名费 Signature fee
    repeated uint64 toAmount = 9; // 每账户金额 Amount per account
    TxType type = 10; // 交易类型 Transaction type
} 

message GetTxFailureListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3; // 返回错误信息 Returns an error message
    uint32 total = 4; // 失败交易总数量 Total number of failed transactions
    repeated TxFailureItem list = 5; // 失败交易信息列表 List of failed transaction information
    string lasthash = 6; // 最后的交易hash The last transaction hash
}


/*************************************查询utxo*************************************/
/*************************************Query UTXO*************************************/

message GetUtxoReq
{
    string version = 1; // 版本 version
    string address = 2; // 账户地址 Account address
}

message Utxo
{
    string hash = 1; // utxo hash
    uint64 value = 2; // utxo value
    uint32 n = 3; // utxo n
}

message GetUtxoAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3; // 返回错误信息 Returns an error message
    string address = 4; // 账户地址 Account address
    repeated Utxo utxos = 5; // 账户下所有utxo All UTXOs under the account
}

/*************************************在被投资节点上查询所有投资账户和金额*************************************/
/*************************************Query all investment accounts and amounts on the investee node*************************************/

message GetAllInvestAddressReq 
{
    string version              = 1;
    string addr                 = 2;
}

message InvestAddressItem 
{
    string addr                 = 1; // 投资地址 Investment address
    uint64 value                = 2; // 投资金额 Investment amount
}

//在被投资节点上查询所有投资账户和金额回执
//Check all investment accounts and amount receipts on the investee node
message GetAllInvestAddressAck 
{
    string version     = 1;
    sint32 code        = 2;
    string message     = 3;
    string addr        = 4;
    repeated InvestAddressItem list = 5;
}

/*************************************获得所有的节点*************************************/
/*************************************Get all the nodes*************************************/

message GetAllStakeNodeListReq 
{
    string version  = 1;
}

message StakeNode 
{
    string addr           = 1; // base58地址 base58 address
    string name           = 2; // 名称 name
    string ip             = 3;  // ip
    bytes identity       = 4; // 标识 logotype
    string logo           = 5; // logo(url或base64) Logo (URL or base64)
    uint64 height         = 6; // 高度 height
}


//获得所有的节点回执
//Get all node receipts
message GetAllStakeNodeListAck 
{
    string version     = 1;//版本号   The version number  
    sint32 code        = 2;//0成功，其余待补充	 0 successful, rest to be replenished	
    string message     = 3;
    repeated StakeNode list = 4;//所有节点列表  List of all nodes
}

/*************************************获得签名次数列表*************************************/
/*************************************Get a list of signatures*************************************/

message GetSignCountListReq 
{
    string version  = 1;
}

message SignCount
{
    string addr   = 1;
    uint32 count = 2;
}

message GetSignCountListAck 
{
    string version     = 1;
    sint32 code        = 2;
    string message     = 3;
    repeated SignCount list  = 4;
}

/*************************************计算手续费*************************************/
/*************************************Calculate the commission*************************************/

message CalcGasReq 
{
    string version = 1; // 版本 version
    uint64 height = 2; // 高度 height
}

message CalcGasAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3; // 返回错误信息 Returns an error message
    uint64 height = 4; // 高度 height
    uint64 gas = 5; // 当前传入高度所需的gasfee The gasfee required for the current incoming height
}


/*************************************查询当前申领金额（预计算）*************************************/
/*************************************Check the current claim amount (precalculated)*************************************/

message GetBonusListReq
{
    string version = 1; // 版本号 The version number
    string bonusAddr = 2;
}

message BonusItem
{
    string addr = 1;
    uint64 value = 2;
}

message GetBonusListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3; // 返回错误信息 Returns an error message
    string bonusAddr = 4;
    repeated BonusItem list = 5;
}



/*************************************多签交易相关协议*************************************/
/*************************************Multi-signature transaction-related agreements*************************************/

message MultiSignTxReq
{
  string version  = 1; // 版本 version
  uint64 height = 2; // 发起交易节点高度值 The height value of the initiating transaction node
  bytes txRaw = 3;
}

message MultiSignTxAck
{
  string version  = 1; // 版本 version
  int32 code      = 2; // 错误码 Error code
  string message  = 3; // 返回错误信息 Returns an error message
  bytes txRaw = 4;
  
}

/*************************************交易状态相关协议*************************************/
/*************************************Transaction status related agreements*************************************/


message GetTransactionStatusListReq
{
    string version = 1; // 版本号 The version number
    string txhash = 2;
}

message OtherStatusItem
{
    string othernodetime = 1;
    int32  othernodecode = 2;
    string othernodemessage = 3;
}


message SelfVerifyStatusItem
{
    string verifyothernodetime = 1;
    int32 verifyothernodecode = 2;
    string verifyothernodemessage = 3;
}

message TransactionStatusItem
{
    string initiatortime = 1;
    int32 selfcode = 2;
    string initiatormessage = 3;
   
    repeated OtherStatusItem Othernode = 4;

    repeated SelfVerifyStatusItem verifyothernode = 5;

    string composetime = 6;
    string selfaddblocktime = 7;
    string selfeaddblockmessage = 8;

    string removependingtime = 9;
}

message GetTransactionStatusListAck
{
    string version = 1; // 版本 version
    int32 code = 2; // 错误码 Error code
    string message = 3; // 返回错误信息 Returns an error message
    TransactionStatusItem list = 5;
}
